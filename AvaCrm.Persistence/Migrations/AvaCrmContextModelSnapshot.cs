// <auto-generated />
using System;
using AvaCrm.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AvaCrm.Persistence.Migrations
{
    [DbContext(typeof(AvaCrmContext))]
    partial class AvaCrmContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TitleEnglish")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitlePersian")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedBy = 0L,
                            CreationDate = new DateTime(2025, 9, 8, 13, 30, 33, 713, DateTimeKind.Local).AddTicks(9117),
                            IsDelete = false,
                            ModifiedBy = 0L,
                            ModifiedDate = new DateTime(2025, 9, 8, 13, 30, 33, 713, DateTimeKind.Local).AddTicks(9117),
                            TitleEnglish = "Admin",
                            TitlePersian = "مدیر"
                        });
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(0);

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("LockoutTotal")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SentCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "05cd8348-3dc0-4c9d-b3d6-ecc730a32bb8",
                            CreatedBy = 0L,
                            CreationDate = new DateTime(2025, 9, 8, 13, 30, 33, 713, DateTimeKind.Local).AddTicks(9117),
                            Email = "admin@avacrm.com",
                            EmailConfirmed = true,
                            IsDelete = false,
                            LockoutEnabled = false,
                            LockoutTotal = false,
                            ModifiedBy = 0L,
                            ModifiedDate = new DateTime(2025, 9, 8, 13, 30, 33, 713, DateTimeKind.Local).AddTicks(9117),
                            PasswordHash = "e86f78a8a3caf0b60d8e74e5942aa6d86dc150cd3c03338aef25b7d2d7e3acc7",
                            PhoneNumberConfirmed = false,
                            RoleId = 1L,
                            SecurityStamp = "e498f27c-da62-4ad4-bb93-64e5b0238d58",
                            TwoFactorEnabled = false,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.UserInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserGender")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            UserId = 1L,
                            FirstName = "System",
                            LastName = "Administrator",
                            UserGender = 1
                        });
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Commons.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Commons.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ایران"
                        });
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Commons.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Provinces");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Name = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Name = "اردبیل"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Name = "اصفهان"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Name = "البرز"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Name = "ایلام"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Name = "بوشهر"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Name = "تهران"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Name = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Name = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Name = "خراسان رضوی"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Name = "خراسان شمالی"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Name = "خوزستان"
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 1,
                            Name = "زنجان"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 1,
                            Name = "سمنان"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            Name = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 1,
                            Name = "فارس"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 1,
                            Name = "قزوین"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 1,
                            Name = "قم"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 1,
                            Name = "کردستان"
                        },
                        new
                        {
                            Id = 21,
                            CountryId = 1,
                            Name = "کرمان"
                        },
                        new
                        {
                            Id = 22,
                            CountryId = 1,
                            Name = "کرمانشاه"
                        },
                        new
                        {
                            Id = 23,
                            CountryId = 1,
                            Name = "کهکیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = 24,
                            CountryId = 1,
                            Name = "گلستان"
                        },
                        new
                        {
                            Id = 25,
                            CountryId = 1,
                            Name = "گیلان"
                        },
                        new
                        {
                            Id = 26,
                            CountryId = 1,
                            Name = "لرستان"
                        },
                        new
                        {
                            Id = 27,
                            CountryId = 1,
                            Name = "مازندران"
                        },
                        new
                        {
                            Id = 28,
                            CountryId = 1,
                            Name = "مرکزی"
                        },
                        new
                        {
                            Id = 29,
                            CountryId = 1,
                            Name = "هرمزگان"
                        },
                        new
                        {
                            Id = 30,
                            CountryId = 1,
                            Name = "همدان"
                        },
                        new
                        {
                            Id = 31,
                            CountryId = 1,
                            Name = "یزد"
                        });
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.ContactPerson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.CustomerAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.CustomerTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.HasKey("TagId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerTags");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.FollowUp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextFollowUpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NextFollowUpDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("FollowUps");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.IndividualCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("IndividualCustomers");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Interaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InteractionType")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextInteraction")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Interactions");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Note", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.OrganizationCustomer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Industry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<long>("ModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("OrganizationCustomers");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.RolePermission", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Accounts.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaCrm.Domain.Entities.Accounts.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.User", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Accounts.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.UserInfo", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Accounts.User", "User")
                        .WithOne("UserInfo")
                        .HasForeignKey("AvaCrm.Domain.Entities.Accounts.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Commons.City", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Commons.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Commons.Province", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Commons.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.ContactPerson", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("ContactPersons")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.CustomerAddress", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.Commons.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("AvaCrm.Domain.Entities.Commons.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaCrm.Domain.Entities.Commons.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("Customer");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.CustomerTag", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("CustomerTags")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.FollowUp", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("FollowUps")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.IndividualCustomer", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithOne("IndividualCustomer")
                        .HasForeignKey("AvaCrm.Domain.Entities.CustomerManagement.IndividualCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Interaction", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("Interactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Note", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithMany("Notes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.OrganizationCustomer", b =>
                {
                    b.HasOne("AvaCrm.Domain.Entities.CustomerManagement.Customer", "Customer")
                        .WithOne("OrganizationCustomer")
                        .HasForeignKey("AvaCrm.Domain.Entities.CustomerManagement.OrganizationCustomer", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.Accounts.User", b =>
                {
                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("AvaCrm.Domain.Entities.CustomerManagement.Customer", b =>
                {
                    b.Navigation("ContactPersons");

                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerTags");

                    b.Navigation("FollowUps");

                    b.Navigation("IndividualCustomer");

                    b.Navigation("Interactions");

                    b.Navigation("Notes");

                    b.Navigation("OrganizationCustomer");
                });
#pragma warning restore 612, 618
        }
    }
}
